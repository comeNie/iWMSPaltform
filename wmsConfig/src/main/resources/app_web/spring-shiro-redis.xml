<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="sessionManager" ref="sessionManager"/>
        <property name="realm" ref="myRealm"/>
        <property name="cacheManager" ref="customShiroCacheManager" />
    </bean>

    <!--集群环境下配置, 用户授权信息Cache-->
    <bean id="customShiroCacheManager" class="com.huamengtong.wms.app.cache.cluster.CustomShiroCacheManager">
        <property name="redisShiroCacheManager" ref="redisShiroCacheManager"/>
    </bean>

    <bean id="redisShiroCacheManager" class="com.huamengtong.wms.app.cache.RedisShiroCacheManager">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <!-- 自定义redisSessionManager管理器实现sessionDAO -->
    <bean id="redisSessionDao" class="com.huamengtong.wms.app.cache.RedisSessionDao">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="customCredentialsMatcher" class="com.huamengtong.wms.app.authorization.shiro.CustomCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="12"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Realm实现,继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的MyRealm.java -->
    <bean id="myRealm" class="com.huamengtong.wms.app.authorization.shiro.MyRealm">
        <property name="credentialsMatcher" ref="customCredentialsMatcher"/>
    </bean>

    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="shareSession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的name,对应的默认是 JSESSIONID -->
        <constructor-arg name="name" value="SHARE_JSESSIONID" />
        <property name="httpOnly" value="true"/>
        <property name="path" value="/" />
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- session会话管理器,替换容器中的httpSession-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 设置全局会话超时时间，默认30分钟(1800000,单位:毫秒) -->
        <property name="globalSessionTimeout" value="1800000" />
        <!-- 是否在会话过期后会调用redisSessionManager的delete方法删除会话 默认true -->
        <property name="deleteInvalidSessions" value="true" />
        <!-- 会话验证器调度时间,定时清理失效会话 -->
        <property name="sessionValidationInterval" value="1800000" />
        <!-- session存储的实现,集群情况下使用 -->
        <property name="sessionDAO" ref="redisSessionDao" />
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
        <property name="sessionIdCookie" ref="shareSession" />
        <!-- 定时检查失效的session -->
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <!--session Listener -->
        <property name="sessionListeners">
            <list>
                <bean class="com.huamengtong.wms.app.authorization.shiro.ShiroSessionListener"/>
            </list>
        </property>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 身份验证过滤器 -->
    <bean id="cusAuthc" class="com.huamengtong.wms.app.authorization.shiro.CustomAuthenticationFilter"/>

    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" depends-on="cusAuthc">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="unauthorizedUrl" value="/unauthorized.html"/>
        <property name="filterChainDefinitions">
            <value>
                /app/login.html = anon
                /login = anon
                /logout = logout
                /status =anon
                /unauthorized = anon
                /validate.jpg = anon
                /favicon.ico = anon
                /app/bower_components/** = anon
                /app/fonts/** = anon
                /app/images/** = anon
                /app/styles/** = anon
                /app/scripts/** = anon
                /**/*.json = user,cusAuthc
                /app/tmpl/*.html = user,cusAuthc
                /app/tmpl/**/*.html = user,cusAuthc
            </value>
        </property>
        <property name="filters">
            <map>
                <entry key="cusAuthc" value-ref="cusAuthc"></entry>
            </map>
        </property>
    </bean>

    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login" />
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>